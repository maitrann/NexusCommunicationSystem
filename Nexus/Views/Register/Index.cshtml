@model Nexus.Models.ModelView.CustomerView
@{
    Layout = "~/Views/Shared/_LayoutPage.cshtml";
#pragma warning disable CS8602

}

<div class="container">
    <nav class="breadcrumb row" role="navigation" aria-label="breadcrumbs">
        <div class="col-12">
            <a href="/" title="Home">Home</a>

            <span aria-hidden="true"><i class="fa fa-angle-right"></i></span>
            <span>Create Account</span>

        </div>
    </nav>
</div>


<main id="MainContent" class="content-for-layout focus-none" role="main" tabindex="-1">
    <link href="//cdn.shopify.com/s/files/1/0508/0409/7187/t/5/assets/customer.css?v=146049045427685583731658294334"
          rel="stylesheet" type="text/css" media="all">
    <div class="container">
        <div class="row justify-content-center">
            <div class="customer register col-md-6 col-12">
                @if (TempData["AlertSuccess"] != null)
                {
                    <div class="alert alert-success alert-dismissible" id="rmAlert">
                        <a href="#" class="close" data-dismiss="alert" aria-label="close" onclick="remove()">&times;</a>
                        Success Register <a href="/Login">Login</a> Now !!
                    </div>
                }
                @if (TempData["AlertError"] != null)
                {
                    <div class="alert alert-danger alert-dismissible" id="rmAlert">
                        <a href="#" class="close" data-dismiss="alert" aria-label="close" onclick="remove()">&times;</a>
                        <strong>Error!</strong> @TempData["AlertError"].ToString().
                    </div>
                }
                <div class="">
                    <svg style="display: none">
                        <symbol id="icon-error" viewBox="0 0 13 13">
                            <circle cx="6.5" cy="6.50049" r="5.5" stroke="white" stroke-width="2"></circle>
                            <circle cx="6.5" cy="6.5" r="5.5" fill="#EB001B" stroke="#EB001B"
                                    stroke-width="0.7"></circle>
                            <path d="M5.87413 3.52832L5.97439 7.57216H7.02713L7.12739 3.52832H5.87413ZM6.50076 9.66091C6.88091 9.66091 7.18169 9.37267 7.18169 9.00504C7.18169 8.63742 6.88091 8.34917 6.50076 8.34917C6.12061 8.34917 5.81982 8.63742 5.81982 9.00504C5.81982 9.37267 6.12061 9.66091 6.50076 9.66091Z"
                                  fill="white"></path>
                            <path d="M5.87413 3.17832H5.51535L5.52424 3.537L5.6245 7.58083L5.63296 7.92216H5.97439H7.02713H7.36856L7.37702 7.58083L7.47728 3.537L7.48617 3.17832H7.12739H5.87413ZM6.50076 10.0109C7.06121 10.0109 7.5317 9.57872 7.5317 9.00504C7.5317 8.43137 7.06121 7.99918 6.50076 7.99918C5.94031 7.99918 5.46982 8.43137 5.46982 9.00504C5.46982 9.57872 5.94031 10.0109 6.50076 10.0109Z"
                                  fill="white" stroke="#EB001B" stroke-width="0.7">
                            </path>
                        </symbol>
                    </svg>
                    <h1 class="heading text-center"><span>Create account</span></h1>
                    <form method="post" asp-controller="Register" id="create_customer" accept-charset="UTF-8">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                        <div class="field">
                            @Html.EditorFor(model=>model.Name,new { htmlAttributes = new { @autocomplete = "off",@id="RegisterForm-email",@placeholder="Name" } })
                            <label for="#RegisterForm-FirstName">
                                Name
                            </label>
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger"})
                        </div>
                        <div class="field">
                            @Html.EditorFor(model=>model.Email,new { htmlAttributes = new { @autocomplete = "off",@id="RegisterForm-email",@placeholder="Email" }})
                            <label for="RegisterForm-LastName">
                                Email
                            </label>
                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger"})
                        </div>
                        @*<div class="field">
                            @Html.EditorFor(model=>model.Phone,new { htmlAttributes = new { @autocomplete = "off",@id="RegisterForm-email",@placeholder="Phone" }})
                            <label for="RegisterForm-email">
                                Phone
                            </label>
                            @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger"})
                        </div>*@





                        <div class="field" id="sender">
                            @Html.EditorFor(model=>model.Phone,new { htmlAttributes = new { @autocomplete = "off",@id="number",@name="phone",@placeholder="Phone" }})
                            <label for="RegisterForm-LastName">
                                Phone
                            </label>
                            @*@Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger"})*@

                            @*<input type="button" id="send" value="send" onclick="phoneAuth()" />*@
                            <div id="recaptcha-container"></div>

                            <a type="button" onclick="phoneAuth()"><h6 style="color:green">Send OTP</h6></a>
                            
                        </div>
                        <br />

                        <div id="verifier">
                            <input type="text" id="verificationcode" placeholder="OTP CODE" />
                            <input type="button" value="Verify" id="verify" onclick="codeverify()" />
                            <div  style="display:none" class="p-conf">Number verify</div>
                            <div style="display:none" class="n-conf">OTP error</div>
                        </div>





                        <div class="field">
                            @Html.PasswordFor(model=>model.Password,htmlAttributes : new { @autocomplete = "off",@id="RegisterForm-email",@placeholder="Password" })
                            <label for="RegisterForm-password">
                                Password
                            </label>
                            @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger"})
                        </div>
                        <div class="field">
                            @Html.PasswordFor(model=>model.confirmPass,htmlAttributes : new { @autocomplete = "off",@id="RegisterForm-email",@placeholder="Password" })
                            <label for="RegisterForm-password">
                                Confirm Password
                            </label>
                            @Html.ValidationMessageFor(model => model.confirmPass, "", new { @class = "text-danger"})
                        </div>
                        <div>
                            <button type="submit">Create</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

</main>
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>




<script src='https://cdn.firebase.com/js/client/2.2.1/firebase.js'></script>
<script src='https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js'></script>
<script src="https://www.gstatic.com/firebasejs/6.0.2/firebase.js"></script>
<script>
    // For Firebase JS SDK v7.20.0 and later, measurementId is optional
    const firebaseConfig = {
        apiKey: "AIzaSyBw7JLluV5wYasHfZmUZe15AmqEuhMUCsM",
        authDomain: "demologinotp.firebaseapp.com",
        projectId: "demologinotp",
        storageBucket: "demologinotp.appspot.com",
        messagingSenderId: "830495380904",
        appId: "1:830495380904:web:07e63b3ba32dbab3b5799d",
        measurementId: "G-B8579B5SFG"
    };
    firebase.initializeApp(firebaseConfig);
    render();
    function render() {
        window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container');
        recaptchaVerifier.render();
    }
    function phoneAuth() {
        var number = document.getElementById('number').value;
        console.log(number);
        firebase.auth().signInWithPhoneNumber(number,
            window.recaptchaVerifier).then(function (confirmationResult) {
                window.confirmationResult = confirmationResult;
                coderesult = confirmationResult;
                document.getElementById('sender').style.display = 'block';
                document.getElementById('verifier').style.display = 'block';
            }).catch(function (error) {
                alert(error.message);
            });
    }

    function codeverify() {
        var code = document.getElementById('verificationcode').value;
        coderesult.confirm(code).then(function () {
            document.getElementsByClassName('p-conf')[0].style.display = 'block';
            document.getElementsByClassName('n-conf')[0].style.display = 'none';
        }).catch(function () {
            document.getElementsByClassName('p-conf')[0].style.display = 'none';
            document.getElementsByClassName('n-conf')[0].style.display = 'block';
        })
    }

</script>